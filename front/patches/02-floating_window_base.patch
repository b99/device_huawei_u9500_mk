
project frameworks/base/
diff --git a/frameworks/base/core/java/android/app/Activity.java b/frameworks/base/core/java/android/app/Activity.java
index cf828ca..e89b746 100644
--- a/frameworks/base/core/java/android/app/Activity.java
+++ b/frameworks/base/core/java/android/app/Activity.java
@@ -29,6 +29,7 @@ import android.content.CursorLoader;
 import android.content.IIntentSender;
 import android.content.Intent;
 import android.content.IntentSender;
+import android.provider.Settings;
 import android.content.SharedPreferences;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
@@ -58,14 +59,17 @@ import android.text.TextUtils;
 import android.text.method.TextKeyListener;
 import android.util.AttributeSet;
 import android.util.EventLog;
+import android.util.DisplayMetrics;
 import android.util.Log;
 import android.util.PrintWriterPrinter;
+import android.util.TypedValue;
 import android.util.Slog;
 import android.util.SparseArray;
 import android.view.ActionMode;
 import android.view.ContextMenu;
 import android.view.ContextMenu.ContextMenuInfo;
 import android.view.ContextThemeWrapper;
+import android.view.Display;
 import android.view.Gravity;
 import android.view.IWindowManager;
 import android.view.KeyEvent;
@@ -1509,6 +1513,9 @@ public class Activity extends ContextThemeWrapper
         if (mWindow != null) {
             // Pass the configuration changed event to the window
             mWindow.onConfigurationChanged(newConfig);
+            if (mWindow.mIsFloatingWindow) {
+                scaleFloatingWindow(null);
+            }
         }
 
         if (mActionBar != null) {
@@ -5201,7 +5208,10 @@ public class Activity extends ContextThemeWrapper
 
         mFragments.attachActivity(this, mContainer, null);
 
-        mWindow = PolicyManager.makeNewWindow(this);
+        if (makeNewWindow(context, intent, info)) {
+            parent = null;
+        }
+
         mWindow.setCallback(this);
         mWindow.getLayoutInflater().setPrivateFactory(this);
         if (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) {
@@ -5505,6 +5515,14 @@ public class Activity extends ContextThemeWrapper
             mStopped = true;
         }
         mResumed = false;
+
+        // Floatingwindows activities should be kept volatile to prevent new activities taking
+        // up front in a minimized space. Every stop call, for instance when pressing home,
+        // will terminate the activity. If the activity is already finishing we might just
+        // as well let it go.
+        if (!mChangingConfigurations && mWindow != null && mWindow.mIsFloatingWindow && !isFinishing()) {
+            finish();
+        }
     }
 
     final void performDestroy() {
@@ -5563,4 +5581,75 @@ public class Activity extends ContextThemeWrapper
          */
         public void onTranslucentConversionComplete(boolean drawComplete);
     }
+
+    /**
+     * Hide from public api
+     * @hide
+     */
+    public void finishFloating() {
+        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
+        mMainThread.performFinishFloating();
+    }
+
+    private void scaleFloatingWindow(Context context) {
+        if (!mWindow.mIsFloatingWindow) {
+            return;
+        }
+        WindowManager wm = null;
+        if (context != null) {
+            wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        } else {
+            wm = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
+        }
+        Display display = wm.getDefaultDisplay();
+        DisplayMetrics metrics = new DisplayMetrics();
+        display.getMetrics(metrics);
+        if (metrics.heightPixels > metrics.widthPixels) {
+            mWindow.setLayout((int)(metrics.widthPixels * 0.9f), (int)(metrics.heightPixels * 0.7f));
+        } else {
+            mWindow.setLayout((int)(metrics.widthPixels * 0.7f), (int)(metrics.heightPixels * 0.9f));
+        }
+    }
+
+    private boolean makeNewWindow(Context context, Intent intent, ActivityInfo info) {
+        boolean floating = (intent.getFlags() & Intent.FLAG_FLOATING_WINDOW) == Intent.FLAG_FLOATING_WINDOW;
+        boolean history = (intent.getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY;
+        if (intent != null && floating && !history) {
+
+            TypedArray styleArray = context.obtainStyledAttributes(info.theme, com.android.internal.R.styleable.Window);
+            TypedValue backgroundValue = styleArray.peekValue(com.android.internal.R.styleable.Window_windowBackground);
+
+            // Apps that have no title don't need no title bar
+            TypedValue outValue = new TypedValue();
+            boolean result = styleArray.getValue(com.android.internal.R.styleable.Window_windowNoTitle, outValue);
+
+            if (backgroundValue != null && backgroundValue.toString().contains("light")) {
+                context.getTheme().applyStyle(com.android.internal.R.style.Theme_DeviceDefault_FloatingWindowLight, true);
+            } else {
+                context.getTheme().applyStyle(com.android.internal.R.style.Theme_DeviceDefault_FloatingWindow, true);
+            }
+
+            // Create our new window
+            mWindow = PolicyManager.makeNewWindow(this);
+            mWindow.mIsFloatingWindow = true;
+            mWindow.setCloseOnTouchOutsideIfNotSet(true);
+            mWindow.setGravity(Gravity.CENTER);
+
+            mWindow.setFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND,
+                    WindowManager.LayoutParams.FLAG_DIM_BEHIND);
+            WindowManager.LayoutParams params = mWindow.getAttributes();
+            params.alpha = 1f;
+            params.dimAmount = 0.5f;
+            mWindow.setAttributes((WindowManager.LayoutParams) params);
+
+            // Scale it
+            scaleFloatingWindow(context);
+
+            return true;
+        } else {
+            mWindow = PolicyManager.makeNewWindow(this);
+
+            return false;
+        }
+    }
 }
diff --git a/frameworks/base/core/java/android/app/ActivityThread.java b/frameworks/base/core/java/android/app/ActivityThread.java
index bbc709c..4d16bfd 100644
--- a/frameworks/base/core/java/android/app/ActivityThread.java
+++ b/frameworks/base/core/java/android/app/ActivityThread.java
@@ -2309,12 +2309,7 @@ public final class ActivityThread {
                     throw e;
 
                 } catch (Exception e) {
-                    if (!mInstrumentation.onException(r.activity, e)) {
-                        throw new RuntimeException(
-                                "Unable to pause activity "
-                                + r.intent.getComponent().toShortString()
-                                + ": " + e.toString(), e);
-                    }
+                   // Unable to resume activity
                 }
                 r.paused = true;
             }
@@ -5147,4 +5142,15 @@ public final class ActivityThread {
 
         throw new RuntimeException("Main thread loop unexpectedly exited");
     }
+        protected void performFinishFloating() {
+        synchronized (mPackages) {
+            Activity a = null;
+            for (ActivityClientRecord ar : mActivities.values()) {
+                a = ar.activity;
+                if (a != null && !a.mFinished && a.getWindow() != null && a.getWindow().mIsFloatingWindow) {
+                    a.finish();
+                }
+            }
+        }
+    }
 }
diff --git a/frameworks/base/core/java/android/app/Instrumentation.java b/frameworks/base/core/java/android/app/Instrumentation.java
index a307a73..803a37c 100644
--- a/frameworks/base/core/java/android/app/Instrumentation.java
+++ b/frameworks/base/core/java/android/app/Instrumentation.java
@@ -1469,10 +1469,18 @@ public class Instrumentation {
             }
         }
         try {
+            // we must resolve if the last intent in the stack is floating to give the flag to the previous
+            boolean floating = false;
+            if (intents.length > 0) {
+                floating = (intents[intents.length - 1].getFlags()&Intent.FLAG_FLOATING_WINDOW) == Intent.FLAG_FLOATING_WINDOW;
+            }
             String[] resolvedTypes = new String[intents.length];
             for (int i=0; i<intents.length; i++) {
                 intents[i].migrateExtraStreamToClipData();
                 intents[i].prepareToLeaveProcess();
+                if (floating) {
+                    intents[i].addFlags(Intent.FLAG_FLOATING_WINDOW);
+                }
                 resolvedTypes[i] = intents[i].resolveTypeIfNeeded(who.getContentResolver());
             }
             int result = ActivityManagerNative.getDefault()
diff --git a/frameworks/base/core/java/android/app/TaskStackBuilder.java b/frameworks/base/core/java/android/app/TaskStackBuilder.java
index 3e0ac7e..73c5be8 100644
--- a/frameworks/base/core/java/android/app/TaskStackBuilder.java
+++ b/frameworks/base/core/java/android/app/TaskStackBuilder.java
@@ -62,6 +62,7 @@ public class TaskStackBuilder {
 
     private final ArrayList<Intent> mIntents = new ArrayList<Intent>();
     private final Context mSourceContext;
+    private boolean mFirstTaskOnHome = true;
 
     private TaskStackBuilder(Context a) {
         mSourceContext = a;
@@ -298,12 +299,29 @@ public class TaskStackBuilder {
         Intent[] intents = new Intent[mIntents.size()];
         if (intents.length == 0) return intents;
 
-        intents[0] = new Intent(mIntents.get(0)).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK |
-                Intent.FLAG_ACTIVITY_CLEAR_TASK |
-                Intent.FLAG_ACTIVITY_TASK_ON_HOME);
+        Intent newIntent = new Intent(mIntents.get(0));
+        newIntent.addFlags(
+                Intent.FLAG_ACTIVITY_NEW_TASK |
+                Intent.FLAG_ACTIVITY_CLEAR_TASK);
+
+        if (mFirstTaskOnHome) {
+            newIntent.addFlags(Intent.FLAG_ACTIVITY_TASK_ON_HOME);
+        }
+
+        intents[0] = newIntent;
         for (int i = 1; i < intents.length; i++) {
             intents[i] = new Intent(mIntents.get(i));
         }
         return intents;
     }
+
+    /**
+     * Hide from the public api
+     *
+     * @hide
+     * @param firstTaskOnHome
+     */
+    public void setTaskOnHome(boolean firstTaskOnHome) {
+        mFirstTaskOnHome = firstTaskOnHome;
+    }
 }
diff --git a/frameworks/base/core/java/android/content/Intent.java b/frameworks/base/core/java/android/content/Intent.java
index 0c3fffc..6620a03 100644
--- a/frameworks/base/core/java/android/content/Intent.java
+++ b/frameworks/base/core/java/android/content/Intent.java
@@ -3807,6 +3807,13 @@ public class Intent implements Parcelable, Cloneable {
      */
     public static final int FLAG_ACTIVITY_SPLIT_VIEW = 0x00001000;
     /**
+     * If set, this intent will always match start up as a floating window
+     * in multi window scenarios.
+     *
+     * @hide
+     */
+    public static final int FLAG_FLOATING_WINDOW = 0x00003000;
+    /**
      * If set, when sending a broadcast only registered receivers will be
      * called -- no BroadcastReceiver components will be launched.
      */
diff --git a/frameworks/base/core/java/android/provider/Settings.java b/frameworks/base/core/java/android/provider/Settings.java
index 03c0ece..f3130f2 100644
--- a/frameworks/base/core/java/android/provider/Settings.java
+++ b/frameworks/base/core/java/android/provider/Settings.java
@@ -2953,6 +2953,12 @@ public final class Settings {
         public static final String HEADS_UP_BLACKLIST_VALUES = "heads_up_blacklist_values";
 
         /**
+         * Whether applications should be launched in float view on left swipe
+         * @hide
+         */
+        public static final String HEADS_UP_FLOAT = "heads_up_float";
+
+        /**
          * Quick Settings Panel Dynamic Tiles
          *
          * @hide
diff --git a/frameworks/base/core/java/android/text/Layout.java b/frameworks/base/core/java/android/text/Layout.java
index 9dfd383..1520fc3 100644
--- a/frameworks/base/core/java/android/text/Layout.java
+++ b/frameworks/base/core/java/android/text/Layout.java
@@ -134,8 +134,9 @@ public abstract class Layout {
                      int width, Alignment align, TextDirectionHeuristic textDir,
                      float spacingMult, float spacingAdd) {
 
-        if (width < 0)
-            throw new IllegalArgumentException("Layout: " + width + " < 0");
+        if (width < 0) {
+            width = 0;
+        }
 
         // Ensure paint doesn't have baselineShift set.
         // While normally we don't modify the paint the user passed in,
@@ -164,7 +165,7 @@ public abstract class Layout {
                               int width, Alignment align,
                               float spacingmult, float spacingadd) {
         if (width < 0) {
-            throw new IllegalArgumentException("Layout: " + width + " < 0");
+            width = 0;
         }
 
         mText = text;
diff --git a/frameworks/base/core/java/android/view/Window.java b/frameworks/base/core/java/android/view/Window.java
index 5ca2a86..6d6db1a 100644
--- a/frameworks/base/core/java/android/view/Window.java
+++ b/frameworks/base/core/java/android/view/Window.java
@@ -152,6 +152,12 @@ public abstract class Window {
     
     private boolean mDestroyed;
 
+    /**
+     * Hide from the public api
+     * @hide
+     */
+    public boolean mIsFloatingWindow = false;
+
     // The current window attributes.
     private final WindowManager.LayoutParams mWindowAttributes =
         new WindowManager.LayoutParams();
diff --git a/frameworks/base/core/java/com/android/internal/widget/ActionBarView.java b/frameworks/base/core/java/com/android/internal/widget/ActionBarView.java
index 335ec5e..36efd0e 100644
--- a/frameworks/base/core/java/com/android/internal/widget/ActionBarView.java
+++ b/frameworks/base/core/java/com/android/internal/widget/ActionBarView.java
@@ -30,6 +30,7 @@ import android.os.Parcelable;
 import android.text.Layout;
 import android.text.TextUtils;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.CollapsibleActionView;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -922,13 +923,13 @@ public class ActionBarView extends AbsActionBarView {
 
         int widthMode = MeasureSpec.getMode(widthMeasureSpec);
         if (widthMode != MeasureSpec.EXACTLY) {
-            throw new IllegalStateException(getClass().getSimpleName() + " can only be used " +
+            Log.i(TAG, getClass().getSimpleName() + " should only be used " +
                     "with android:layout_width=\"match_parent\" (or fill_parent)");
         }
 
         int heightMode = MeasureSpec.getMode(heightMeasureSpec);
         if (heightMode != MeasureSpec.AT_MOST) {
-            throw new IllegalStateException(getClass().getSimpleName() + " can only be used " +
+            Log.i(TAG, getClass().getSimpleName() + " should only be used " +
                     "with android:layout_height=\"wrap_content\"");
         }
 
diff --git a/frameworks/base/core/res/res/values/symbols.xml b/frameworks/base/core/res/res/values/symbols.xml
index 24932f8..a668036 100644
--- a/frameworks/base/core/res/res/values/symbols.xml
+++ b/frameworks/base/core/res/res/values/symbols.xml
@@ -1286,6 +1286,8 @@
   <java-symbol type="style" name="Theme.DeviceDefault.Dialog.NoFrame" />
   <java-symbol type="style" name="Theme.IconMenu" />
   <java-symbol type="style" name="Theme.Panel.Volume" />
+  <java-symbol type="style" name="Theme.DeviceDefault.FloatingWindow" />
+  <java-symbol type="style" name="Theme.DeviceDefault.FloatingWindowLight" />
 
   <java-symbol type="attr" name="mediaRouteButtonStyle" />
   <java-symbol type="attr" name="externalRouteEnabledDrawable" />
diff --git a/frameworks/base/core/res/res/values/themes_device_defaults.xml b/frameworks/base/core/res/res/values/themes_device_defaults.xml
index 721c6b0..5f27daa 100644
--- a/frameworks/base/core/res/res/values/themes_device_defaults.xml
+++ b/frameworks/base/core/res/res/values/themes_device_defaults.xml
@@ -513,6 +513,31 @@ easier.
     <style name="Theme.DeviceDefault.Panel" parent="Theme.Holo.Panel" >
 
     </style>
+
+    <style name="Theme.DeviceDefault.FloatingWindow">
+        <item name="android:windowIsFloating">false</item>
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowFrame">@null</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:windowAnimationStyle">@android:style/Animation.Dialog</item>
+        <item name="android:windowActionModeOverlay">true</item>
+        <item name="android:windowCloseOnTouchOutside">true</item>
+        <item name="android:windowFullscreen">false</item>
+        <item name="android:windowSoftInputMode">stateAlwaysHidden|adjustPan</item>
+    </style>
+
+    <style name="Theme.DeviceDefault.FloatingWindowLight" parent="Theme.Holo.Light.Dialog">
+        <item name="android:windowIsFloating">false</item>
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowFrame">@null</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:windowAnimationStyle">@android:style/Animation.Dialog</item>
+        <item name="android:windowActionModeOverlay">true</item>
+        <item name="android:windowCloseOnTouchOutside">true</item>
+        <item name="android:windowFullscreen">false</item>
+        <item name="android:windowSoftInputMode">stateAlwaysHidden|adjustPan</item>
+     </style>
+
     <!-- DeviceDefault light theme for panel windows. This removes all extraneous window
     decorations, so you basically have an empty rectangle in which to place your content. It makes
     the window floating, with a transparent background, and turns off dimming behind the window. -->
diff --git a/frameworks/base/packages/SystemUI/res/menu/notification_popup_menu.xml b/frameworks/base/packages/SystemUI/res/menu/notification_popup_menu.xml
index 103da81..0fec7ed 100644
--- a/frameworks/base/packages/SystemUI/res/menu/notification_popup_menu.xml
+++ b/frameworks/base/packages/SystemUI/res/menu/notification_popup_menu.xml
@@ -23,4 +23,5 @@
     <item android:id="@+id/notification_inspect_item_wipe_app" android:title="@string/advanced_dev_option_wipe_app" />
     <item android:id="@+id/notification_inspect_item_uninstall" android:title="@string/advanced_dev_option_uninstall" />
     <item android:id="@+id/notification_spam_item" android:title="@string/status_bar_notification_spam_item_title" />
+    <item android:id="@+id/notification_floating_item" android:title="@string/status_bar_floating_item_title" />
 </menu>
diff --git a/frameworks/base/packages/SystemUI/res/values-ru/cm_strings.xml b/frameworks/base/packages/SystemUI/res/values-ru/cm_strings.xml
index de78966..990a470 100644
--- a/frameworks/base/packages/SystemUI/res/values-ru/cm_strings.xml
+++ b/frameworks/base/packages/SystemUI/res/values-ru/cm_strings.xml
@@ -59,6 +59,9 @@
     <item quantity="few">%1$d устройства</item>
     <item quantity="other">%1$d устройств</item>
   </plurals>
+  <!-- Floating mode -->
+  <string name="status_bar_floating_item_title">Режим всплыв. окон</string>
+  <string name="status_bar_floating_no_interface">Приложение без интерфейса</string>
   <string name="quick_settings_camera_error_connect">Не удаётся подключиться к камере</string>
   <string name="navbar_dialog_title">Выберите действие</string>
   <string name="navbar_home_button">Домой</string>
diff --git a/frameworks/base/packages/SystemUI/res/values/cm_strings.xml b/frameworks/base/packages/SystemUI/res/values/cm_strings.xml
index e64187cd..2f27b4b 100644
--- a/frameworks/base/packages/SystemUI/res/values/cm_strings.xml
+++ b/frameworks/base/packages/SystemUI/res/values/cm_strings.xml
@@ -66,6 +66,10 @@
     <!-- [CHAR LIMIT=30] Location settings screen, device only location mode -->
     <string name="location_mode_sensors_only_title">Device only</string>
 
+    <!-- Floating mode -->
+    <string name="status_bar_floating_item_title">Floating mode</string>
+    <string name="status_bar_floating_no_interface">App provides no interface</string>
+
     <!-- Expanded desktop strings break the rules a bit - the icon identifies the feature, the string indicates current state -->
     <string name="quick_settings_expanded_desktop">Expanded</string>
     <string name="quick_settings_expanded_desktop_off">Normal</string>
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/SwipeHelper.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/SwipeHelper.java
index 315e3a0..54278cb 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/SwipeHelper.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/SwipeHelper.java
@@ -77,6 +77,12 @@ public class SwipeHelper implements Gefingerpoken {
     private Runnable mWatchLongPress;
     private long mLongPressTimeout;
 
+    private int mTriggerDirection;
+    public static final int LEFT = 0;
+    public static final int RIGHT = 1;
+    public static final int UP = 2;
+    public static final int DOWN = 3;
+
     public SwipeHelper(int swipeDirection, Callback callback, float densityScale,
             float pagingTouchSlop) {
         mCallback = callback;
@@ -299,6 +305,7 @@ public class SwipeHelper implements Gefingerpoken {
         anim.addListener(new AnimatorListenerAdapter() {
             public void onAnimationEnd(Animator animation) {
                 mCallback.onChildDismissed(view);
+                mCallback.onChildDismissed(view, mTriggerDirection);
                 animView.setLayerType(View.LAYER_TYPE_NONE, null);
             }
         });
@@ -350,9 +357,16 @@ public class SwipeHelper implements Gefingerpoken {
         }
         switch (action) {
             case MotionEvent.ACTION_OUTSIDE:
+                // don't do anything if we tap outside, ignore
+                break;
             case MotionEvent.ACTION_MOVE:
                 if (mCurrView != null) {
                     float delta = getPos(ev) - mInitialTouchPos;
+
+                    mTriggerDirection = delta < 0 ?
+                        (mSwipeDirection == X ? LEFT : UP) :
+                        (mSwipeDirection == X ? RIGHT : DOWN);
+
                     // don't let items that can't be dismissed be dragged more than
                     // maxScrollDistance
                     if (CONSTRAIN_SWIPE && !mCallback.canChildBeDismissed(mCurrView)) {
@@ -440,6 +454,8 @@ public class SwipeHelper implements Gefingerpoken {
 
         void onChildDismissed(View v);
 
+        void onChildDismissed(View v, int direction);
+
         void onDragCancelled(View v);
     }
 }
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
index 2fa7135..59a6d93 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/recent/RecentsHorizontalScrollView.java
@@ -424,4 +424,6 @@ public class RecentsHorizontalScrollView extends HorizontalScrollView
 
         return res;
     }
+
+    public void onChildDismissed(View v, int direction) {}
 }
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
index 38f30bb..99ce84d 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/recent/RecentsVerticalScrollView.java
@@ -417,4 +417,6 @@ public class RecentsVerticalScrollView extends ScrollView
     public void setCallback(RecentsCallback callback) {
         mCallback = callback;
     }
+
+    public void onChildDismissed(View v, int direction) {}
 }
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index 5e50742..7bea9b7 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -74,6 +74,7 @@ import android.widget.LinearLayout;
 import android.widget.PopupMenu;
 import android.widget.RemoteViews;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.android.internal.statusbar.IStatusBarService;
 import com.android.internal.statusbar.StatusBarIcon;
@@ -502,6 +503,7 @@ public abstract class BaseStatusBar extends SystemUI implements
                 final NotificationData.Entry entry = (Entry) v.getTag();
                 final StatusBarNotification sbNotification = entry.notification;
                 final String packageNameF = sbNotification.getPackageName();
+                final PendingIntent contentIntent = sbNotification.getNotification().contentIntent;
                 if (packageNameF == null) return false;
                 if (v.getWindowToken() == null) return false;
 
@@ -554,6 +556,15 @@ public abstract class BaseStatusBar extends SystemUI implements
                         if (item.getItemId() == R.id.notification_inspect_item) {
                             startApplicationDetailsActivity(packageNameF);
                             animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE);
+                        } else if (item.getItemId() == R.id.notification_floating_item) {
+                            animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE);
+                            if (contentIntent == null) {
+                                String text = mContext.getResources().getString(R.string.status_bar_floating_no_interface);
+                                int duration = Toast.LENGTH_SHORT;
+                                Toast.makeText(mContext, text, duration).show();
+                            } else {
+                                launchFloating(contentIntent);
+                            }
                         } else if (item.getItemId() == R.id.notification_inspect_item_force_stop) {
                             ActivityManager am = (ActivityManager) mContext
                                     .getSystemService(
@@ -585,6 +596,14 @@ public abstract class BaseStatusBar extends SystemUI implements
                         return true;
                     }
                 });
+
+                mNotificationBlamePopup.setOnDismissListener(new PopupMenu.OnDismissListener() {
+                    @Override
+                    public void onDismiss(PopupMenu popupMenu) {
+                        mNotificationBlamePopup = null;
+                    }
+                });
+
                 mNotificationBlamePopup.show();
 
                 return true;
@@ -944,6 +963,7 @@ public abstract class BaseStatusBar extends SystemUI implements
         }
 
         public void onClick(View v) {
+            if (mNotificationBlamePopup != null) return;
             try {
                 // The intent we are sending is for the application, which
                 // won't have permission to immediately start an activity after
@@ -1714,4 +1734,32 @@ public abstract class BaseStatusBar extends SystemUI implements
             mPieControlPanel.animateCollapsePanels();
         }
     }
+
+    public void launchFloating() {
+        StatusBarNotification sbn = mInterruptingNotificationEntry.notification;
+        final PendingIntent contentIntent = sbn.getNotification().contentIntent;
+        if (contentIntent == null) {
+            String text = mContext.getResources().getString(R.string.status_bar_floating_no_interface);
+            int duration = Toast.LENGTH_SHORT;
+            Toast.makeText(mContext, text, duration).show();
+        } else {
+            launchFloating(contentIntent);
+        }
+    }
+
+    private void launchFloating(PendingIntent pIntent) {
+        Intent overlay = new Intent();
+        overlay.addFlags(Intent.FLAG_FLOATING_WINDOW | Intent.FLAG_ACTIVITY_CLEAR_TASK);
+        try {
+            ActivityManagerNative.getDefault().resumeAppSwitches();
+            ActivityManagerNative.getDefault().dismissKeyguardOnNextActivity();
+        } catch (RemoteException e) {
+        }
+        try {
+            pIntent.send(mContext, 0, overlay);
+        } catch (PendingIntent.CanceledException e) {
+            // the stack trace isn't very helpful here.  Just log the exception message.
+            Slog.w(TAG, "Sending contentIntent failed: " + e);
+        }
+    }
 }
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/HeadsUpNotificationView.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/HeadsUpNotificationView.java
index b928af0..3fbe05b 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/HeadsUpNotificationView.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/HeadsUpNotificationView.java
@@ -17,9 +17,13 @@
 package com.android.systemui.statusbar.policy;
 
 import android.app.Notification;
+import android.app.PendingIntent;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.Rect;
+import android.provider.Settings;
+import android.service.notification.StatusBarNotification;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.view.KeyEvent;
@@ -29,6 +33,7 @@ import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
+import android.widget.Toast;
 
 import com.android.systemui.ExpandHelper;
 import com.android.systemui.R;
@@ -223,11 +228,7 @@ public class HeadsUpNotificationView extends FrameLayout implements SwipeHelper.
         return true;
     }
 
-    @Override
-    public void onChildDismissed(View v) {
-        Log.v(TAG, "User swiped heads up to dismiss");
-        mBar.onHeadsUpDismissed();
-    }
+    public void onChildDismissed(View v) {}
 
     @Override
     public boolean dispatchKeyEvent(KeyEvent event) {
@@ -262,4 +263,12 @@ public class HeadsUpNotificationView extends FrameLayout implements SwipeHelper.
     public View getChildContentView(View v) {
         return mContentSlider;
     }
-}
\ No newline at end of file
+
+    @Override
+    public void onChildDismissed(View v, int direction) {
+        if (Settings.System.getInt(mContext.getContentResolver(), Settings.System.HEADS_UP_FLOAT, 0) == 1
+                && direction == SwipeHelper.LEFT)
+                mBar.launchFloating();
+        mBar.onHeadsUpDismissed();
+    }
+}
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/NotificationRowLayout.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/NotificationRowLayout.java
index cc0fd41..713bf7e 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/NotificationRowLayout.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/NotificationRowLayout.java
@@ -295,4 +295,6 @@ public class NotificationRowLayout
             mOnSizeChangedListener.onSizeChanged(this, w, h, oldw, oldh);
         }
     }
+
+    public void onChildDismissed(View v, int direction) {}
 }
diff --git a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
index 3fd6cc9..539b15d 100644
--- a/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
+++ b/frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
@@ -2275,8 +2275,17 @@ public class PhoneWindow extends Window implements MenuBuilder.Callback {
                 return false;
             }
             final Callback cb = getCallback();
-            return cb != null && !isDestroyed() && mFeatureId < 0 ? cb.dispatchTouchEvent(ev)
-                    : super.dispatchTouchEvent(ev);
+            if (cb != null && !isDestroyed() && mFeatureId < 0) {
+                if (cb instanceof android.app.Activity && mIsFloatingWindow) {
+                    android.app.Activity act = (android.app.Activity)cb;
+                    if (shouldCloseOnTouch(act, ev)) {
+                        act.finishFloating();
+                        return true;
+                    }
+                }
+                return cb.dispatchTouchEvent(ev);
+            }
+            return super.dispatchTouchEvent(ev);
         }
 
         @Override
diff --git a/frameworks/base/services/java/com/android/server/am/ActivityRecord.java b/frameworks/base/services/java/com/android/server/am/ActivityRecord.java
index e987240..592a85e 100644
--- a/frameworks/base/services/java/com/android/server/am/ActivityRecord.java
+++ b/frameworks/base/services/java/com/android/server/am/ActivityRecord.java
@@ -25,6 +25,7 @@ import com.android.server.am.ActivityStack.ActivityState;
 import android.app.ActivityOptions;
 import android.app.ResultInfo;
 import android.content.ComponentName;
+import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.pm.ApplicationInfo;
@@ -44,6 +45,7 @@ import android.util.EventLog;
 import android.util.Log;
 import android.util.Slog;
 import android.util.TimeUtils;
+import android.view.ContextThemeWrapper;
 import android.view.IApplicationToken;
 import android.view.WindowManager;
 
@@ -137,6 +139,11 @@ final class ActivityRecord {
     boolean frozenBeforeDestroy;// has been frozen but not yet destroyed.
     boolean immersive;      // immersive mode (don't interrupt if possible)
     boolean forceNewConfig; // force re-create with new config next time
+
+    boolean topIntent;
+    boolean newTask;
+    boolean floatingWindow;
+
     int launchCount;        // count of launches since last state
     long lastLaunchTime;    // time of last lauch of this activity
 
@@ -417,6 +424,57 @@ final class ActivityRecord {
                         ? android.R.style.Theme
                         : android.R.style.Theme_Holo;
             }
+
+            // This is where the package gets its first context from the attribute-cache
+            // In order to hook its attributes we set up our check for floating mutil windows here.
+            topIntent = true;
+
+            ActivityStack stack = supervisor.getFocusedStack();
+
+            floatingWindow = (intent.getFlags() & Intent.FLAG_FLOATING_WINDOW) == Intent.FLAG_FLOATING_WINDOW
+                    && (intent.getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY;
+
+            TaskRecord baseRecord = stack != null && stack.mTaskHistory.size() > 0 ? stack.mTaskHistory.get(stack.mTaskHistory.size() -1) : null;
+
+            if (baseRecord != null) {
+
+                ActivityRecord record = baseRecord.mActivities.size() > 0 ? baseRecord.mActivities.get(baseRecord.mActivities.size() - 1) : null;
+
+                final boolean floats = (baseRecord.intent.getFlags() & Intent.FLAG_FLOATING_WINDOW) == Intent.FLAG_FLOATING_WINDOW
+                        && (baseRecord.intent.getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY;
+                final boolean taskAffinity = record == null ? false : aInfo.applicationInfo.packageName.equals(record.packageName);
+                newTask = (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) == Intent.FLAG_ACTIVITY_NEW_TASK;
+
+                // If the current intent is not a new task we will check its top parent.
+                // Perhaps it started out as a multiwindow in which case we pass the flag on
+                if (floats && (!newTask || taskAffinity)) {
+                    intent.addFlags(Intent.FLAG_FLOATING_WINDOW);
+                    // Flag the activity as sub-task
+                    topIntent = false;
+                    floatingWindow = true;
+                }
+            }
+
+            // If this is a multiwindow activity we prevent it from messing up the history stack,
+            // like jumping back home, killing the current activity or polluting recents
+            if (floatingWindow) {
+                intent.setFlags(intent.getFlags() & ~Intent.FLAG_ACTIVITY_TASK_ON_HOME);
+                intent.setFlags(intent.getFlags() & ~Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                intent.addFlags(Intent.FLAG_ACTIVITY_NO_USER_ACTION);
+                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+                // If this is the mother-intent we make it volatile
+                if (topIntent) {
+                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
+                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
+                }
+
+                // Change theme
+                realTheme = com.android.internal.R.style.Theme_DeviceDefault_FloatingWindow;
+            } else {
+                intent.setFlags(intent.getFlags() & ~Intent.FLAG_FLOATING_WINDOW);
+            }
+
             if ((aInfo.flags&ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0) {
                 windowFlags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
             }
diff --git a/frameworks/base/services/java/com/android/server/am/ActivityStack.java b/frameworks/base/services/java/com/android/server/am/ActivityStack.java
index 443a722..18f5002 100644
--- a/frameworks/base/services/java/com/android/server/am/ActivityStack.java
+++ b/frameworks/base/services/java/com/android/server/am/ActivityStack.java
@@ -37,6 +37,7 @@ import static com.android.server.am.ActivityStackSupervisor.HOME_STACK_ID;
 
 import com.android.internal.os.BatteryStatsImpl;
 import com.android.internal.util.Objects;
+import com.android.server.AttributeCache;
 import com.android.server.Watchdog;
 import com.android.server.am.ActivityManagerService.ItemMatcher;
 import com.android.server.power.PowerManagerService;
@@ -76,6 +77,7 @@ import android.os.UserHandle;
 import android.util.EventLog;
 import android.util.Log;
 import android.util.Slog;
+import android.view.ContextThemeWrapper;
 import android.view.Display;
 import android.view.IWindowManager;
 import android.view.WindowManagerGlobal;
@@ -149,7 +151,7 @@ final class ActivityStack {
      * The back history of all previous (and possibly still
      * running) activities.  It contains #TaskRecord objects.
      */
-    private ArrayList<TaskRecord> mTaskHistory = new ArrayList<TaskRecord>();
+    ArrayList<TaskRecord> mTaskHistory = new ArrayList<TaskRecord>();
 
     /**
      * Used for validating app tokens with window manager.
@@ -1413,7 +1415,7 @@ final class ActivityStack {
         // We need to start pausing the current activity so the top one
         // can be resumed...
         boolean pausing = mStackSupervisor.pauseBackStacks(userLeaving);
-        if (mResumedActivity != null) {
+        if (mResumedActivity != null && !next.floatingWindow) {
             pausing = true;
             startPausingLocked(userLeaving, false);
             if (DEBUG_STATES) Slog.d(TAG, "resumeTopActivityLocked: Pausing " + mResumedActivity);
@@ -1495,7 +1497,7 @@ final class ActivityStack {
             if (prev.finishing) {
                 if (DEBUG_TRANSITION) Slog.v(TAG,
                         "Prepare close transition: prev=" + prev);
-                if (mNoAnimActivities.contains(prev)) {
+                if (mNoAnimActivities.contains(prev) || next.floatingWindow) {
                     anim = false;
                     mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, false);
                 } else {
@@ -1507,7 +1509,7 @@ final class ActivityStack {
                 mWindowManager.setAppVisibility(prev.appToken, false);
             } else {
                 if (DEBUG_TRANSITION) Slog.v(TAG, "Prepare open transition: prev=" + prev);
-                if (mNoAnimActivities.contains(next)) {
+                if (mNoAnimActivities.contains(next) || next.floatingWindow) {
                     anim = false;
                     mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, false);
                 } else {
@@ -1639,7 +1641,7 @@ final class ActivityStack {
                 if (!next.hasBeenLaunched) {
                     next.hasBeenLaunched = true;
                 } else  if (SHOW_APP_STARTING_PREVIEW && lastStack != null &&
-                        mStackSupervisor.isFrontStack(lastStack)) {
+                        mStackSupervisor.isFrontStack(lastStack) && !next.floatingWindow) {
                     mWindowManager.setAppStartingWindow(
                             next.appToken, next.packageName, next.theme,
                             mService.compatibilityInfoForPackageLocked(next.info.applicationInfo),
@@ -1672,7 +1674,7 @@ final class ActivityStack {
             if (!next.hasBeenLaunched) {
                 next.hasBeenLaunched = true;
             } else {
-                if (SHOW_APP_STARTING_PREVIEW) {
+                if (SHOW_APP_STARTING_PREVIEW && !next.floatingWindow) {
                     mWindowManager.setAppStartingWindow(
                             next.appToken, next.packageName, next.theme,
                             mService.compatibilityInfoForPackageLocked(
@@ -1740,6 +1742,7 @@ final class ActivityStack {
 
     final void startActivityLocked(ActivityRecord r, boolean newTask,
             boolean doResume, boolean keepCurTransition, Bundle options) {
+
         TaskRecord rTask = r.task;
         final int taskId = rTask.taskId;
         if (taskForIdLocked(taskId) == null || newTask) {
@@ -1820,11 +1823,11 @@ final class ActivityStack {
             }
             if (DEBUG_TRANSITION) Slog.v(TAG,
                     "Prepare open transition: starting " + r);
-            if ((r.intent.getFlags()&Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
+            if (((r.intent.getFlags()&Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) || (r.floatingWindow && !r.topIntent)) {
                 mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, keepCurTransition);
                 mNoAnimActivities.add(r);
             } else {
-                mWindowManager.prepareAppTransition(newTask
+                mWindowManager.prepareAppTransition(newTask && !r.floatingWindow
                         ? AppTransition.TRANSIT_TASK_OPEN
                         : AppTransition.TRANSIT_ACTIVITY_OPEN, keepCurTransition);
                 mNoAnimActivities.remove(r);
@@ -1847,7 +1850,7 @@ final class ActivityStack {
                     doShow = topRunningNonDelayedActivityLocked(null) == r;
                 }
             }
-            if (SHOW_APP_STARTING_PREVIEW && doShow) {
+            if (SHOW_APP_STARTING_PREVIEW && doShow && !r.floatingWindow) {
                 // Figure out if we are transitioning from another activity that is
                 // "has the same starting icon" as the next one.  This allows the
                 // window manager to keep the previous window it had previously
@@ -2497,7 +2500,7 @@ final class ActivityStack {
             boolean endTask = index <= 0;
             if (DEBUG_VISBILITY || DEBUG_TRANSITION) Slog.v(TAG,
                     "Prepare close transition: finishing " + r);
-            mWindowManager.prepareAppTransition(endTask
+            mWindowManager.prepareAppTransition(endTask && !r.floatingWindow
                     ? AppTransition.TRANSIT_TASK_CLOSE
                     : AppTransition.TRANSIT_ACTIVITY_CLOSE, false);
 
@@ -3098,7 +3101,7 @@ final class ActivityStack {
         if (numTasks == 0 || index < 0)  {
             // nothing to do!
             if (reason != null &&
-                    (reason.intent.getFlags()&Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
+                    ((reason.intent.getFlags()&Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0 || reason.floatingWindow)) {
                 ActivityOptions.abort(options);
             } else {
                 updateTransitLocked(AppTransition.TRANSIT_TASK_TO_FRONT, options);
@@ -3114,7 +3117,7 @@ final class ActivityStack {
 
         if (DEBUG_TRANSITION) Slog.v(TAG, "Prepare to front transition: task=" + tr);
         if (reason != null &&
-                (reason.intent.getFlags()&Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {
+                ((reason.intent.getFlags()&Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0 || reason.floatingWindow)) {
             mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE, false);
             ActivityRecord r = topRunningActivityLocked(null);
             if (r != null) {
