
project frameworks/base/
diff --git a/frameworks/base/core/res/res/values/config.xml b/frameworks/base/core/res/res/values/config.xml
index ad41149..3dffa78 100644
--- a/frameworks/base/core/res/res/values/config.xml
+++ b/frameworks/base/core/res/res/values/config.xml
@@ -1480,6 +1480,10 @@
     <string-array name="config_disabledComponents" translatable="false">
     </string-array>
 
+    <!-- The list of components which should be forced to be enabled. -->
+    <string-array name="config_forceEnabledComponents" translatable="false">
+    </string-array>
+
     <!-- Device supports LED flashlight -->
     <bool name="config_enableTorch">false</bool>
 
diff --git a/frameworks/base/core/res/res/values/symbols.xml b/frameworks/base/core/res/res/values/symbols.xml
index 24932f8..efa0789 100644
--- a/frameworks/base/core/res/res/values/symbols.xml
+++ b/frameworks/base/core/res/res/values/symbols.xml
@@ -1908,6 +1908,7 @@
 
   <!-- Package Manager -->
   <java-symbol type="array" name="config_disabledComponents" />
+  <java-symbol type="array" name="config_forceEnabledComponents" />
 
   <!-- LED flashlight -->
   <java-symbol type="bool" name="config_enableTorch" />
diff --git a/frameworks/base/services/java/com/android/server/pm/PackageManagerService.java b/frameworks/base/services/java/com/android/server/pm/PackageManagerService.java
index 3834e88..4b86c45 100644
--- a/frameworks/base/services/java/com/android/server/pm/PackageManagerService.java
+++ b/frameworks/base/services/java/com/android/server/pm/PackageManagerService.java
@@ -523,6 +523,8 @@ public class PackageManagerService extends IPackageManager.Stub {
 
     boolean mPreLaunchCheckPackagesReplaced = false;
 
+    ArrayList<ComponentName> mDisabledComponentsList;
+
     // Set of pending broadcasts for aggregating enable/disable of components.
     static class PendingPackageBroadcasts {
         // for each user id, a map of <package name -> components within that package>
@@ -1623,9 +1625,11 @@ public class PackageManagerService extends IPackageManager.Stub {
             }
 
             // Disable components marked for disabling at build-time
+            mDisabledComponentsList = new ArrayList<ComponentName>();
             for (String name : mContext.getResources().getStringArray(
                     com.android.internal.R.array.config_disabledComponents)) {
                 ComponentName cn = ComponentName.unflattenFromString(name);
+                mDisabledComponentsList.add(cn);
                 Slog.v(TAG, "Disabling " + name);
                 String className = cn.getClassName();
                 PackageSetting pkgSetting = mSettings.mPackages.get(cn.getPackageName());
@@ -1637,6 +1641,21 @@ public class PackageManagerService extends IPackageManager.Stub {
                 pkgSetting.disableComponentLPw(className, UserHandle.USER_OWNER);
             }
 
+            // Enable components marked for forced-enable at build-time
+            for (String name : mContext.getResources().getStringArray(
+                    com.android.internal.R.array.config_forceEnabledComponents)) {
+                ComponentName cn = ComponentName.unflattenFromString(name);
+                Slog.v(TAG, "Enabling " + name);
+                String className = cn.getClassName();
+                PackageSetting pkgSetting = mSettings.mPackages.get(cn.getPackageName());
+                if (pkgSetting == null || pkgSetting.pkg == null
+                        || !pkgSetting.pkg.hasComponentClassName(className)) {
+                    Slog.w(TAG, "Unable to enable " + name);
+                    continue;
+                }
+                pkgSetting.enableComponentLPw(className, UserHandle.USER_OWNER);
+            }
+
             // can downgrade to reader
             mSettings.writeLPr();
 
@@ -4177,18 +4196,8 @@ public class PackageManagerService extends IPackageManager.Stub {
             final AtomicInteger i = new AtomicInteger(0);
             final int pkgsSize = pkgs.size();
             ExecutorService executorService = Executors.newFixedThreadPool(sNThreads);
-            PackageManager pm = null;;
-            if (mContext != null)
-                pm = mContext.getPackageManager();
-            String n = null;
             for (PackageParser.Package pkg : pkgs) {
                 final PackageParser.Package p = pkg;
-                if (pm != null)
-                    n = (String)p.applicationInfo.loadLabel(pm);
-                if (n == null || n.length() == 0)
-                    n = p.packageName;
-                final String name = "\n"+n;
-                n = null;
                 synchronized (mInstallLock) {
                     Runnable task = new Runnable() {
                         @Override
@@ -4199,7 +4208,7 @@ public class PackageManagerService extends IPackageManager.Stub {
                                     ActivityManagerNative.getDefault().showBootMessage(
                                         mContext.getResources().getString(
                                             com.android.internal.R.string.android_upgrading_apk,
-                                            i.get(), pkgsSize, name), true);
+                                            i.get(), pkgsSize), true);
                                 } catch (RemoteException e) {
                                 }
                             }
@@ -7986,7 +7995,7 @@ public class PackageManagerService extends IPackageManager.Stub {
     private int getUnknownSourcesSettings() {
         return android.provider.Settings.Global.getInt(mContext.getContentResolver(),
                 android.provider.Settings.Global.INSTALL_NON_MARKET_APPS,
-                1);
+                -1);
     }
 
     public void setInstallerPackageName(String targetPackage, String installerPackageName) {
@@ -11280,6 +11289,12 @@ public class PackageManagerService extends IPackageManager.Stub {
     public void setComponentEnabledSetting(ComponentName componentName,
             int newState, int flags, int userId) {
         if (!sUserManager.exists(userId)) return;
+        // Don't allow to enable components marked for disabling at build-time
+        if (mDisabledComponentsList.contains(componentName)) {
+            Slog.d(TAG, "Ignoring attempt to set enabled state of disabled component "
+                    + componentName.flattenToString());
+            return;
+        }
         setEnabledSetting(componentName.getPackageName(),
                 componentName.getClassName(), newState, flags, userId, null);
     }
@@ -11294,6 +11309,7 @@ public class PackageManagerService extends IPackageManager.Stub {
             throw new IllegalArgumentException("Invalid new component state: "
                     + newState);
         }
+
         PackageSetting pkgSetting;
         final int uid = Binder.getCallingUid();
         final int permission = mContext.checkCallingOrSelfPermission(
